/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package framework

import (
	"fmt"
	"math/rand"
	"strings"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TestHelper provides common utility functions for KCP testing.
type TestHelper struct{}

// NewTestHelper creates a new test helper instance.
func NewTestHelper() *TestHelper {
	return &TestHelper{}
}

// GenerateTestName generates a unique test name with timestamp and random suffix.
func (h *TestHelper) GenerateTestName(prefix string) string {
	if prefix == "" {
		prefix = "test"
	}
	
	timestamp := time.Now().Format("20060102-150405")
	random := rand.Intn(1000)
	
	return fmt.Sprintf("%s-%s-%03d", prefix, timestamp, random)
}

// GenerateTestLabels generates standard labels for test resources.
func (h *TestHelper) GenerateTestLabels(testName string) map[string]string {
	return map[string]string{
		"test.kcp.io/test-name":      testName,
		"test.kcp.io/created-by":     "kcp-test-framework",
		"test.kcp.io/creation-time":  time.Now().Format(time.RFC3339),
	}
}

// GenerateTestAnnotations generates standard annotations for test resources.
func (h *TestHelper) GenerateTestAnnotations(testName, description string) map[string]string {
	annotations := map[string]string{
		"test.kcp.io/test-name":    testName,
		"test.kcp.io/framework":    "kcp-test-framework",
		"test.kcp.io/created-at":   time.Now().Format(time.RFC3339),
	}
	
	if description != "" {
		annotations["test.kcp.io/description"] = description
	}
	
	return annotations
}

// CreateTestObjectMeta creates ObjectMeta with test-specific labels and annotations.
func (h *TestHelper) CreateTestObjectMeta(name, namespace, testName string) metav1.ObjectMeta {
	return metav1.ObjectMeta{
		Name:        name,
		Namespace:   namespace,
		Labels:      h.GenerateTestLabels(testName),
		Annotations: h.GenerateTestAnnotations(testName, "Generated by KCP test framework"),
	}
}

// SanitizeName sanitizes a string to be used as a Kubernetes resource name.
func (h *TestHelper) SanitizeName(name string) string {
	// Convert to lowercase
	sanitized := strings.ToLower(name)
	
	// Replace invalid characters with hyphens
	sanitized = strings.ReplaceAll(sanitized, "_", "-")
	sanitized = strings.ReplaceAll(sanitized, ".", "-")
	sanitized = strings.ReplaceAll(sanitized, "/", "-")
	sanitized = strings.ReplaceAll(sanitized, "\\", "-")
	
	// Remove leading/trailing hyphens and spaces
	sanitized = strings.Trim(sanitized, "- ")
	
	// Limit length to 63 characters (DNS-1123 requirement)
	if len(sanitized) > 63 {
		sanitized = sanitized[:60] + "..."
	}
	
	return sanitized
}

// CreateUniqueResourceName creates a unique resource name for testing.
func (h *TestHelper) CreateUniqueResourceName(prefix, testName string) string {
	base := fmt.Sprintf("%s-%s", prefix, h.SanitizeName(testName))
	
	// Add random suffix to ensure uniqueness
	suffix := rand.Intn(10000)
	name := fmt.Sprintf("%s-%04d", base, suffix)
	
	// Ensure it doesn't exceed 63 characters
	if len(name) > 63 {
		// Truncate the base part to make room for suffix
		maxBase := 63 - 5 // 5 chars for "-XXXX" suffix
		base = base[:maxBase]
		name = fmt.Sprintf("%s-%04d", base, suffix)
	}
	
	return name
}

// CompareLabels compares two label maps and returns true if they match.
func (h *TestHelper) CompareLabels(expected, actual map[string]string) bool {
	if len(expected) != len(actual) {
		return false
	}
	
	for key, expectedValue := range expected {
		actualValue, exists := actual[key]
		if !exists || actualValue != expectedValue {
			return false
		}
	}
	
	return true
}

// HasRequiredLabels checks if the actual labels contain all required labels.
func (h *TestHelper) HasRequiredLabels(required, actual map[string]string) bool {
	for key, expectedValue := range required {
		actualValue, exists := actual[key]
		if !exists || actualValue != expectedValue {
			return false
		}
	}
	
	return true
}

// IsTestResource checks if a resource was created by the test framework.
func (h *TestHelper) IsTestResource(labels map[string]string) bool {
	createdBy, exists := labels["test.kcp.io/created-by"]
	return exists && createdBy == "kcp-test-framework"
}

// GetTestName extracts the test name from resource labels.
func (h *TestHelper) GetTestName(labels map[string]string) string {
	testName, exists := labels["test.kcp.io/test-name"]
	if !exists {
		return ""
	}
	return testName
}

// FormatDuration formats a duration for test output.
func (h *TestHelper) FormatDuration(d time.Duration) string {
	if d < time.Second {
		return fmt.Sprintf("%.0fms", float64(d.Nanoseconds())/1e6)
	} else if d < time.Minute {
		return fmt.Sprintf("%.1fs", d.Seconds())
	} else {
		return fmt.Sprintf("%.1fm", d.Minutes())
	}
}