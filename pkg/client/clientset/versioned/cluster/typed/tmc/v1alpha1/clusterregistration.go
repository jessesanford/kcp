/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/rest"

	"github.com/kcp-dev/logicalcluster/v3"

	v1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
)

// ClusterRegistrationsGetter has a method to return a ClusterRegistrationInterface.
// A group's client should implement this interface.
type ClusterRegistrationsGetter interface {
	ClusterRegistrations() ClusterRegistrationInterface
}

// ClusterRegistrationsClusterGetter has a method to return a ClusterRegistrationClusterInterface.
// A group's cluster client should implement this interface.
type ClusterRegistrationsClusterGetter interface {
	ClusterRegistrations() ClusterRegistrationClusterInterface
}

// ClusterRegistrationInterface has methods to work with ClusterRegistration resources.
type ClusterRegistrationInterface interface {
	Create(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.CreateOptions) (*v1alpha1.ClusterRegistration, error)
	Update(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.UpdateOptions) (*v1alpha1.ClusterRegistration, error)
	UpdateStatus(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.UpdateOptions) (*v1alpha1.ClusterRegistration, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1alpha1.ClusterRegistration, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1alpha1.ClusterRegistrationList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterRegistration, err error)
	ClusterRegistrationExpansion
}

// ClusterRegistrationClusterInterface can scope down to one cluster and return a ClusterRegistrationInterface.
type ClusterRegistrationClusterInterface interface {
	Cluster(logicalcluster.Path) ClusterRegistrationInterface
}

// clusterRegistrations implements ClusterRegistrationInterface
type clusterRegistrations struct {
	client rest.Interface
}

// newClusterRegistrations returns a ClusterRegistrations
func newClusterRegistrations(c *TmcV1alpha1Client) *clusterRegistrations {
	return &clusterRegistrations{
		client: c.RESTClient(),
	}
}

// Get takes name of the clusterRegistration, and returns the corresponding clusterRegistration object, and an error if there is any.
func (c *clusterRegistrations) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1alpha1.ClusterRegistration, err error) {
	result = &v1alpha1.ClusterRegistration{}
	err = c.client.Get().
		Resource("clusterregistrations").
		Name(name).
		VersionedParams(&options, ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClusterRegistrations that match those selectors.
func (c *clusterRegistrations) List(ctx context.Context, opts metav1.ListOptions) (result *v1alpha1.ClusterRegistrationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ClusterRegistrationList{}
	err = c.client.Get().
		Resource("clusterregistrations").
		VersionedParams(&opts, ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested clusterRegistrations.
func (c *clusterRegistrations) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("clusterregistrations").
		VersionedParams(&opts, ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a clusterRegistration and creates it.  Returns the server's representation of the clusterRegistration, and an error, if there is any.
func (c *clusterRegistrations) Create(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.CreateOptions) (result *v1alpha1.ClusterRegistration, err error) {
	result = &v1alpha1.ClusterRegistration{}
	err = c.client.Post().
		Resource("clusterregistrations").
		VersionedParams(&opts, ParameterCodec).
		Body(clusterRegistration).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a clusterRegistration and updates it. Returns the server's representation of the clusterRegistration, and an error, if there is any.
func (c *clusterRegistrations) Update(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.UpdateOptions) (result *v1alpha1.ClusterRegistration, err error) {
	result = &v1alpha1.ClusterRegistration{}
	err = c.client.Put().
		Resource("clusterregistrations").
		Name(clusterRegistration.Name).
		VersionedParams(&opts, ParameterCodec).
		Body(clusterRegistration).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *clusterRegistrations) UpdateStatus(ctx context.Context, clusterRegistration *v1alpha1.ClusterRegistration, opts metav1.UpdateOptions) (result *v1alpha1.ClusterRegistration, err error) {
	result = &v1alpha1.ClusterRegistration{}
	err = c.client.Put().
		Resource("clusterregistrations").
		Name(clusterRegistration.Name).
		SubResource("status").
		VersionedParams(&opts, ParameterCodec).
		Body(clusterRegistration).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the clusterRegistration and deletes it. Returns an error if one occurs.
func (c *clusterRegistrations) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("clusterregistrations").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *clusterRegistrations) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("clusterregistrations").
		VersionedParams(&listOpts, ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched clusterRegistration.
func (c *clusterRegistrations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterRegistration, err error) {
	result = &v1alpha1.ClusterRegistration{}
	err = c.client.Patch(pt).
		Resource("clusterregistrations").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// clusterRegistrationsCluster implements ClusterRegistrationClusterInterface
type clusterRegistrationsCluster struct {
	client *TmcV1alpha1Client
}

// newClusterRegistrationsCluster returns a clusterRegistrationsCluster
func newClusterRegistrationsCluster(c *TmcV1alpha1Client) *clusterRegistrationsCluster {
	return &clusterRegistrationsCluster{
		client: c,
	}
}

// Cluster scopes the client down to a particular cluster.
func (c *clusterRegistrationsCluster) Cluster(clusterPath logicalcluster.Path) ClusterRegistrationInterface {
	return c.client.Cluster(clusterPath).ClusterRegistrations()
}