/*
Copyright 2024 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"net/http"

	"k8s.io/client-go/rest"

	"github.com/kcp-dev/logicalcluster/v3"

	v1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
)

type TmcV1alpha1Interface interface {
	RESTClient() rest.Interface
	ClusterRegistrationsGetter
}

type TmcV1alpha1ClusterInterface interface {
	Cluster(logicalcluster.Path) TmcV1alpha1Interface
	ClusterRegistrationsClusterGetter
}

// TmcV1alpha1Client is used to interact with features provided by the tmc.io group.
type TmcV1alpha1Client struct {
	restClient rest.Interface
}

func (c *TmcV1alpha1Client) ClusterRegistrations() ClusterRegistrationInterface {
	return newClusterRegistrations(c)
}

// NewForConfig creates a new TmcV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*TmcV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new TmcV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*TmcV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &TmcV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new TmcV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *TmcV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new TmcV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *TmcV1alpha1Client {
	return &TmcV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactory.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *TmcV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}

// Cluster scopes the client down to a particular cluster.
func (c *TmcV1alpha1Client) Cluster(clusterPath logicalcluster.Path) TmcV1alpha1Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &TmcV1alpha1Client{
		restClient: c.restClient,
	}
}

// ClusterClientset contains the clients for groups.
type ClusterClientset struct {
	*TmcV1alpha1Client
}

// Cluster scopes the client down to a particular cluster.
func (c *ClusterClientset) Cluster(clusterPath logicalcluster.Path) TmcV1alpha1Interface {
	return c.TmcV1alpha1Client.Cluster(clusterPath)
}

// ClusterRegistrations returns the ClusterRegistrationsClusterGetter for the ClusterClientset.
func (c *ClusterClientset) ClusterRegistrations() ClusterRegistrationClusterInterface {
	return newClusterRegistrationsCluster(c.TmcV1alpha1Client)
}