/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadPlacementClusterLister helps list WorkloadPlacements across all workspaces,
// or scope down to a WorkloadPlacementLister for one workspace.
// All objects returned here must be treated as read-only.
type WorkloadPlacementClusterLister interface {
	// List lists all WorkloadPlacements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.WorkloadPlacement, err error)
	// Cluster returns a lister that can list and get WorkloadPlacements in one workspace.
	Cluster(clusterName logicalcluster.Name) WorkloadPlacementLister
	WorkloadPlacementClusterListerExpansion
}

// workloadPlacementClusterLister implements the WorkloadPlacementClusterLister interface.
type workloadPlacementClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.WorkloadPlacement]
}

var _ WorkloadPlacementClusterLister = new(workloadPlacementClusterLister)

// NewWorkloadPlacementClusterLister returns a new WorkloadPlacementClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewWorkloadPlacementClusterLister(indexer cache.Indexer) WorkloadPlacementClusterLister {
	return &workloadPlacementClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.WorkloadPlacement](indexer, kcpv1alpha1.Resource("workloadplacement")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get WorkloadPlacements.
func (l *workloadPlacementClusterLister) Cluster(clusterName logicalcluster.Name) WorkloadPlacementLister {
	return &workloadPlacementLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// workloadPlacementLister can list all WorkloadPlacements inside a workspace
// or scope down to a WorkloadPlacementNamespaceLister for one namespace.
type workloadPlacementLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.WorkloadPlacement]
}

var _ WorkloadPlacementLister = new(workloadPlacementLister)

// WorkloadPlacementLister can list WorkloadPlacements across all namespaces, or scope down to a WorkloadPlacementNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type WorkloadPlacementLister interface {
	// List lists all WorkloadPlacements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.WorkloadPlacement, err error)
	// WorkloadPlacements returns a lister that can list and get WorkloadPlacements in one workspace and namespace.
	WorkloadPlacements(namespace string) WorkloadPlacementNamespaceLister
	WorkloadPlacementListerExpansion
}

// WorkloadPlacements returns an object that can list and get WorkloadPlacements in one namespace.
func (l *workloadPlacementLister) WorkloadPlacements(namespace string) WorkloadPlacementNamespaceLister {
	return &workloadPlacementNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// workloadPlacementNamespaceLister implements the WorkloadPlacementNamespaceLister
// interface.
type workloadPlacementNamespaceLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.WorkloadPlacement]
}

var _ WorkloadPlacementNamespaceLister = new(workloadPlacementNamespaceLister)

// WorkloadPlacementNamespaceLister can list all WorkloadPlacements, or get one in particular.
// All objects returned here must be treated as read-only.
type WorkloadPlacementNamespaceLister interface {
	// List lists all WorkloadPlacements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.WorkloadPlacement, err error)
	// Get retrieves the WorkloadPlacement from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.WorkloadPlacement, error)
	WorkloadPlacementNamespaceListerExpansion
}

// NewWorkloadPlacementLister returns a new WorkloadPlacementLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewWorkloadPlacementLister(indexer cache.Indexer) WorkloadPlacementLister {
	return &workloadPlacementLister{
		kcplisters.New[*kcpv1alpha1.WorkloadPlacement](indexer, kcpv1alpha1.Resource("workloadplacement")),
	}
}

// workloadPlacementScopedLister can list all WorkloadPlacements inside a workspace
// or scope down to a WorkloadPlacementNamespaceLister for one namespace.
type workloadPlacementScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.WorkloadPlacement]
}

// WorkloadPlacements returns an object that can list and get WorkloadPlacements in one namespace.
func (l *workloadPlacementScopedLister) WorkloadPlacements(namespace string) WorkloadPlacementLister {
	return &workloadPlacementLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
