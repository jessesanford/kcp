/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcptmcv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/pkg/client/tmc/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/pkg/client/tmc/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/pkg/client/tmc/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/pkg/client/tmc/listers/tmc/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterRegistrationClusterInformer provides access to a shared informer and lister for
// ClusterRegistrations.
type ClusterRegistrationClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterRegistrationInformer
	ClusterWithContext(context.Context, logicalcluster.Name) ClusterRegistrationInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.ClusterRegistrationClusterLister
}

type clusterRegistrationClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewClusterRegistrationClusterInformer constructs a new informer for ClusterRegistration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterRegistrationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterRegistrationClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterRegistrationClusterInformer constructs a new informer for ClusterRegistration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterRegistrationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().ClusterRegistrations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().ClusterRegistrations().Watch(context.Background(), options)
			},
		},
		&kcptmcv1alpha1.ClusterRegistration{},
		resyncPeriod,
		indexers,
	)
}

func (i *clusterRegistrationClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterRegistrationClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *clusterRegistrationClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcptmcv1alpha1.ClusterRegistration{}, i.defaultInformer)
}

func (i *clusterRegistrationClusterInformer) Lister() kcpv1alpha1.ClusterRegistrationClusterLister {
	return kcpv1alpha1.NewClusterRegistrationClusterLister(i.Informer().GetIndexer())
}

func (i *clusterRegistrationClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterRegistrationInformer {
	return &clusterRegistrationInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *clusterRegistrationClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) ClusterRegistrationInformer {
	return &clusterRegistrationInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type clusterRegistrationInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.ClusterRegistrationLister
}

func (i *clusterRegistrationInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *clusterRegistrationInformer) Lister() kcpv1alpha1.ClusterRegistrationLister {
	return i.lister
}

// ClusterRegistrationInformer provides access to a shared informer and lister for
// ClusterRegistrations.
type ClusterRegistrationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.ClusterRegistrationLister
}

type clusterRegistrationScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewClusterRegistrationInformer constructs a new informer for ClusterRegistration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterRegistrationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterRegistrationInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterRegistrationInformer constructs a new informer for ClusterRegistration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterRegistrationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().ClusterRegistrations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().ClusterRegistrations().Watch(context.Background(), options)
			},
		},
		&kcptmcv1alpha1.ClusterRegistration{},
		resyncPeriod,
		indexers,
	)
}

func (i *clusterRegistrationScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcptmcv1alpha1.ClusterRegistration{}, i.defaultInformer)
}

func (i *clusterRegistrationScopedInformer) Lister() kcpv1alpha1.ClusterRegistrationLister {
	return kcpv1alpha1.NewClusterRegistrationLister(i.Informer().GetIndexer())
}

func (i *clusterRegistrationScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterRegistrationInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
