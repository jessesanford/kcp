/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcptmcv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/pkg/client/tmc/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/pkg/client/tmc/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/pkg/client/tmc/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/pkg/client/tmc/listers/tmc/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// WorkloadPlacementClusterInformer provides access to a shared informer and lister for
// WorkloadPlacements.
type WorkloadPlacementClusterInformer interface {
	Cluster(logicalcluster.Name) WorkloadPlacementInformer
	ClusterWithContext(context.Context, logicalcluster.Name) WorkloadPlacementInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.WorkloadPlacementClusterLister
}

type workloadPlacementClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewWorkloadPlacementClusterInformer constructs a new informer for WorkloadPlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkloadPlacementClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkloadPlacementClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkloadPlacementClusterInformer constructs a new informer for WorkloadPlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkloadPlacementClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().WorkloadPlacements().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().WorkloadPlacements().Watch(context.Background(), options)
			},
		},
		&kcptmcv1alpha1.WorkloadPlacement{},
		resyncPeriod,
		indexers,
	)
}

func (i *workloadPlacementClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkloadPlacementClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *workloadPlacementClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcptmcv1alpha1.WorkloadPlacement{}, i.defaultInformer)
}

func (i *workloadPlacementClusterInformer) Lister() kcpv1alpha1.WorkloadPlacementClusterLister {
	return kcpv1alpha1.NewWorkloadPlacementClusterLister(i.Informer().GetIndexer())
}

func (i *workloadPlacementClusterInformer) Cluster(clusterName logicalcluster.Name) WorkloadPlacementInformer {
	return &workloadPlacementInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *workloadPlacementClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) WorkloadPlacementInformer {
	return &workloadPlacementInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type workloadPlacementInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.WorkloadPlacementLister
}

func (i *workloadPlacementInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *workloadPlacementInformer) Lister() kcpv1alpha1.WorkloadPlacementLister {
	return i.lister
}

// WorkloadPlacementInformer provides access to a shared informer and lister for
// WorkloadPlacements.
type WorkloadPlacementInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.WorkloadPlacementLister
}

type workloadPlacementScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewWorkloadPlacementInformer constructs a new informer for WorkloadPlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkloadPlacementInformer(client kcpversioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredWorkloadPlacementInformer(client, resyncPeriod, namespace, indexers, nil)
}

// NewFilteredWorkloadPlacementInformer constructs a new informer for WorkloadPlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkloadPlacementInformer(client kcpversioned.Interface, resyncPeriod time.Duration, namespace string, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().WorkloadPlacements(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TmcV1alpha1().WorkloadPlacements(namespace).Watch(context.Background(), options)
			},
		},
		&kcptmcv1alpha1.WorkloadPlacement{},
		resyncPeriod,
		indexers,
	)
}

func (i *workloadPlacementScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcptmcv1alpha1.WorkloadPlacement{}, i.defaultInformer)
}

func (i *workloadPlacementScopedInformer) Lister() kcpv1alpha1.WorkloadPlacementLister {
	return kcpv1alpha1.NewWorkloadPlacementLister(i.Informer().GetIndexer())
}

func (i *workloadPlacementScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredWorkloadPlacementInformer(client, resyncPeriod, i.namespace, cache.Indexers{
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, i.tweakListOptions)
}
