/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	tmcv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tmc/v1alpha1"
)

// WorkloadPlacementSpecApplyConfiguration represents a declarative configuration of the WorkloadPlacementSpec type for use
// with apply.
type WorkloadPlacementSpecApplyConfiguration struct {
	WorkloadSelector *WorkloadSelectorApplyConfiguration `json:"workloadSelector,omitempty"`
	ClusterSelector  *ClusterSelectorApplyConfiguration  `json:"clusterSelector,omitempty"`
	PlacementPolicy  *tmcv1alpha1.PlacementPolicy        `json:"placementPolicy,omitempty"`
	NumberOfClusters *int32                              `json:"numberOfClusters,omitempty"`
}

// WorkloadPlacementSpecApplyConfiguration constructs a declarative configuration of the WorkloadPlacementSpec type for use with
// apply.
func WorkloadPlacementSpec() *WorkloadPlacementSpecApplyConfiguration {
	return &WorkloadPlacementSpecApplyConfiguration{}
}

// WithWorkloadSelector sets the WorkloadSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadSelector field is set to the value of the last call.
func (b *WorkloadPlacementSpecApplyConfiguration) WithWorkloadSelector(value *WorkloadSelectorApplyConfiguration) *WorkloadPlacementSpecApplyConfiguration {
	b.WorkloadSelector = value
	return b
}

// WithClusterSelector sets the ClusterSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSelector field is set to the value of the last call.
func (b *WorkloadPlacementSpecApplyConfiguration) WithClusterSelector(value *ClusterSelectorApplyConfiguration) *WorkloadPlacementSpecApplyConfiguration {
	b.ClusterSelector = value
	return b
}

// WithPlacementPolicy sets the PlacementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PlacementPolicy field is set to the value of the last call.
func (b *WorkloadPlacementSpecApplyConfiguration) WithPlacementPolicy(value tmcv1alpha1.PlacementPolicy) *WorkloadPlacementSpecApplyConfiguration {
	b.PlacementPolicy = &value
	return b
}

// WithNumberOfClusters sets the NumberOfClusters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumberOfClusters field is set to the value of the last call.
func (b *WorkloadPlacementSpecApplyConfiguration) WithNumberOfClusters(value int32) *WorkloadPlacementSpecApplyConfiguration {
	b.NumberOfClusters = &value
	return b
}
