/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ClusterSelectorApplyConfiguration represents a declarative configuration of the ClusterSelector type for use
// with apply.
type ClusterSelectorApplyConfiguration struct {
	LabelSelector    *v1.LabelSelectorApplyConfiguration `json:"labelSelector,omitempty"`
	LocationSelector []string                            `json:"locationSelector,omitempty"`
	ClusterNames     []string                            `json:"clusterNames,omitempty"`
}

// ClusterSelectorApplyConfiguration constructs a declarative configuration of the ClusterSelector type for use with
// apply.
func ClusterSelector() *ClusterSelectorApplyConfiguration {
	return &ClusterSelectorApplyConfiguration{}
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *ClusterSelectorApplyConfiguration) WithLabelSelector(value *v1.LabelSelectorApplyConfiguration) *ClusterSelectorApplyConfiguration {
	b.LabelSelector = value
	return b
}

// WithLocationSelector adds the given value to the LocationSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LocationSelector field.
func (b *ClusterSelectorApplyConfiguration) WithLocationSelector(values ...string) *ClusterSelectorApplyConfiguration {
	for i := range values {
		b.LocationSelector = append(b.LocationSelector, values[i])
	}
	return b
}

// WithClusterNames adds the given value to the ClusterNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterNames field.
func (b *ClusterSelectorApplyConfiguration) WithClusterNames(values ...string) *ClusterSelectorApplyConfiguration {
	for i := range values {
		b.ClusterNames = append(b.ClusterNames, values[i])
	}
	return b
}
