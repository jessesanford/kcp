/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	conditionsv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/third_party/conditions/apis/conditions/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterRegistrationStatusApplyConfiguration represents a declarative configuration of the ClusterRegistrationStatus type for use
// with apply.
type ClusterRegistrationStatusApplyConfiguration struct {
	Conditions         *conditionsv1alpha1.Conditions          `json:"conditions,omitempty"`
	LastHeartbeat      *v1.Time                                `json:"lastHeartbeat,omitempty"`
	AllocatedResources *ClusterResourceUsageApplyConfiguration `json:"allocatedResources,omitempty"`
}

// ClusterRegistrationStatusApplyConfiguration constructs a declarative configuration of the ClusterRegistrationStatus type for use with
// apply.
func ClusterRegistrationStatus() *ClusterRegistrationStatusApplyConfiguration {
	return &ClusterRegistrationStatusApplyConfiguration{}
}

// WithConditions sets the Conditions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Conditions field is set to the value of the last call.
func (b *ClusterRegistrationStatusApplyConfiguration) WithConditions(value conditionsv1alpha1.Conditions) *ClusterRegistrationStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// WithLastHeartbeat sets the LastHeartbeat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastHeartbeat field is set to the value of the last call.
func (b *ClusterRegistrationStatusApplyConfiguration) WithLastHeartbeat(value v1.Time) *ClusterRegistrationStatusApplyConfiguration {
	b.LastHeartbeat = &value
	return b
}

// WithAllocatedResources sets the AllocatedResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocatedResources field is set to the value of the last call.
func (b *ClusterRegistrationStatusApplyConfiguration) WithAllocatedResources(value *ClusterResourceUsageApplyConfiguration) *ClusterRegistrationStatusApplyConfiguration {
	b.AllocatedResources = value
	return b
}
