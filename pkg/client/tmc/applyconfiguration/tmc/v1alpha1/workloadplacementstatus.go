/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	conditionsv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/third_party/conditions/apis/conditions/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// WorkloadPlacementStatusApplyConfiguration represents a declarative configuration of the WorkloadPlacementStatus type for use
// with apply.
type WorkloadPlacementStatusApplyConfiguration struct {
	Conditions         *conditionsv1alpha1.Conditions        `json:"conditions,omitempty"`
	SelectedClusters   []string                              `json:"selectedClusters,omitempty"`
	PlacedWorkloads    []PlacedWorkloadApplyConfiguration    `json:"placedWorkloads,omitempty"`
	LastPlacementTime  *v1.Time                              `json:"lastPlacementTime,omitempty"`
	PlacementDecisions []PlacementDecisionApplyConfiguration `json:"placementDecisions,omitempty"`
}

// WorkloadPlacementStatusApplyConfiguration constructs a declarative configuration of the WorkloadPlacementStatus type for use with
// apply.
func WorkloadPlacementStatus() *WorkloadPlacementStatusApplyConfiguration {
	return &WorkloadPlacementStatusApplyConfiguration{}
}

// WithConditions sets the Conditions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Conditions field is set to the value of the last call.
func (b *WorkloadPlacementStatusApplyConfiguration) WithConditions(value conditionsv1alpha1.Conditions) *WorkloadPlacementStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// WithSelectedClusters adds the given value to the SelectedClusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SelectedClusters field.
func (b *WorkloadPlacementStatusApplyConfiguration) WithSelectedClusters(values ...string) *WorkloadPlacementStatusApplyConfiguration {
	for i := range values {
		b.SelectedClusters = append(b.SelectedClusters, values[i])
	}
	return b
}

// WithPlacedWorkloads adds the given value to the PlacedWorkloads field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PlacedWorkloads field.
func (b *WorkloadPlacementStatusApplyConfiguration) WithPlacedWorkloads(values ...*PlacedWorkloadApplyConfiguration) *WorkloadPlacementStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPlacedWorkloads")
		}
		b.PlacedWorkloads = append(b.PlacedWorkloads, *values[i])
	}
	return b
}

// WithLastPlacementTime sets the LastPlacementTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastPlacementTime field is set to the value of the last call.
func (b *WorkloadPlacementStatusApplyConfiguration) WithLastPlacementTime(value v1.Time) *WorkloadPlacementStatusApplyConfiguration {
	b.LastPlacementTime = &value
	return b
}

// WithPlacementDecisions adds the given value to the PlacementDecisions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PlacementDecisions field.
func (b *WorkloadPlacementStatusApplyConfiguration) WithPlacementDecisions(values ...*PlacementDecisionApplyConfiguration) *WorkloadPlacementStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPlacementDecisions")
		}
		b.PlacementDecisions = append(b.PlacementDecisions, *values[i])
	}
	return b
}
