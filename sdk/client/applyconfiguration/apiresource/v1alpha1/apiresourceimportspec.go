/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"

	apiresourcev1alpha1 "github.com/kcp-dev/kcp/sdk/apis/apiresource/v1alpha1"
)

// APIResourceImportSpecApplyConfiguration represents an declarative configuration of the APIResourceImportSpec type for use
// with apply.
type APIResourceImportSpecApplyConfiguration struct {
	CommonAPIResourceSpecApplyConfiguration `json:",inline"`
	SchemaUpdateStrategy                    *apiresourcev1alpha1.SchemaUpdateStrategyType `json:"schemaUpdateStrategy,omitempty"`
	Location                                *string                                       `json:"location,omitempty"`
}

// APIResourceImportSpecApplyConfiguration constructs an declarative configuration of the APIResourceImportSpec type for use with
// apply.
func APIResourceImportSpec() *APIResourceImportSpecApplyConfiguration {
	return &APIResourceImportSpecApplyConfiguration{}
}

// WithGroupVersion sets the GroupVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GroupVersion field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithGroupVersion(value *GroupVersionApplyConfiguration) *APIResourceImportSpecApplyConfiguration {
	b.GroupVersion = value
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithScope(value v1.ResourceScope) *APIResourceImportSpecApplyConfiguration {
	b.Scope = &value
	return b
}

// WithPlural sets the Plural field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Plural field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithPlural(value string) *APIResourceImportSpecApplyConfiguration {
	b.Plural = &value
	return b
}

// WithSingular sets the Singular field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Singular field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithSingular(value string) *APIResourceImportSpecApplyConfiguration {
	b.Singular = &value
	return b
}

// WithShortNames adds the given value to the ShortNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ShortNames field.
func (b *APIResourceImportSpecApplyConfiguration) WithShortNames(values ...string) *APIResourceImportSpecApplyConfiguration {
	for i := range values {
		b.ShortNames = append(b.ShortNames, values[i])
	}
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithKind(value string) *APIResourceImportSpecApplyConfiguration {
	b.Kind = &value
	return b
}

// WithListKind sets the ListKind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ListKind field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithListKind(value string) *APIResourceImportSpecApplyConfiguration {
	b.ListKind = &value
	return b
}

// WithCategories adds the given value to the Categories field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Categories field.
func (b *APIResourceImportSpecApplyConfiguration) WithCategories(values ...string) *APIResourceImportSpecApplyConfiguration {
	for i := range values {
		b.Categories = append(b.Categories, values[i])
	}
	return b
}

// WithOpenAPIV3Schema sets the OpenAPIV3Schema field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OpenAPIV3Schema field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithOpenAPIV3Schema(value runtime.RawExtension) *APIResourceImportSpecApplyConfiguration {
	b.OpenAPIV3Schema = &value
	return b
}

// WithSubResources sets the SubResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubResources field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithSubResources(value apiresourcev1alpha1.SubResources) *APIResourceImportSpecApplyConfiguration {
	b.SubResources = &value
	return b
}

// WithColumnDefinitions sets the ColumnDefinitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ColumnDefinitions field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithColumnDefinitions(value apiresourcev1alpha1.ColumnDefinitions) *APIResourceImportSpecApplyConfiguration {
	b.ColumnDefinitions = &value
	return b
}

// WithSchemaUpdateStrategy sets the SchemaUpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchemaUpdateStrategy field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithSchemaUpdateStrategy(value apiresourcev1alpha1.SchemaUpdateStrategyType) *APIResourceImportSpecApplyConfiguration {
	b.SchemaUpdateStrategy = &value
	return b
}

// WithLocation sets the Location field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Location field is set to the value of the last call.
func (b *APIResourceImportSpecApplyConfiguration) WithLocation(value string) *APIResourceImportSpecApplyConfiguration {
	b.Location = &value
	return b
}
