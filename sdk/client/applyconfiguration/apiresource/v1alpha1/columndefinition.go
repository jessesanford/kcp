/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/kcp-dev/kcp/sdk/client/applyconfiguration/meta/v1"
)

// ColumnDefinitionApplyConfiguration represents an declarative configuration of the ColumnDefinition type for use
// with apply.
type ColumnDefinitionApplyConfiguration struct {
	v1.TableColumnDefinitionApplyConfiguration `json:",inline"`
	JSONPath                                   *string `json:"jsonPath,omitempty"`
}

// ColumnDefinitionApplyConfiguration constructs an declarative configuration of the ColumnDefinition type for use with
// apply.
func ColumnDefinition() *ColumnDefinitionApplyConfiguration {
	return &ColumnDefinitionApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithName(value string) *ColumnDefinitionApplyConfiguration {
	b.Name = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithType(value string) *ColumnDefinitionApplyConfiguration {
	b.Type = &value
	return b
}

// WithFormat sets the Format field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Format field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithFormat(value string) *ColumnDefinitionApplyConfiguration {
	b.Format = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithDescription(value string) *ColumnDefinitionApplyConfiguration {
	b.Description = &value
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithPriority(value int32) *ColumnDefinitionApplyConfiguration {
	b.Priority = &value
	return b
}

// WithJSONPath sets the JSONPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JSONPath field is set to the value of the last call.
func (b *ColumnDefinitionApplyConfiguration) WithJSONPath(value string) *ColumnDefinitionApplyConfiguration {
	b.JSONPath = &value
	return b
}
