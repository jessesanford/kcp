/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/kcp-dev/kcp/sdk/client/applyconfiguration/meta/v1"
)

// LocationSpecApplyConfiguration represents an declarative configuration of the LocationSpec type for use
// with apply.
type LocationSpecApplyConfiguration struct {
	Resource                *GroupVersionResourceApplyConfiguration    `json:"resource,omitempty"`
	Description             *string                                    `json:"description,omitempty"`
	AvailableSelectorLabels []AvailableSelectorLabelApplyConfiguration `json:"availableSelectorLabels,omitempty"`
	InstanceSelector        *v1.LabelSelectorApplyConfiguration        `json:"instanceSelector,omitempty"`
}

// LocationSpecApplyConfiguration constructs an declarative configuration of the LocationSpec type for use with
// apply.
func LocationSpec() *LocationSpecApplyConfiguration {
	return &LocationSpecApplyConfiguration{}
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithResource(value *GroupVersionResourceApplyConfiguration) *LocationSpecApplyConfiguration {
	b.Resource = value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithDescription(value string) *LocationSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithAvailableSelectorLabels adds the given value to the AvailableSelectorLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailableSelectorLabels field.
func (b *LocationSpecApplyConfiguration) WithAvailableSelectorLabels(values ...*AvailableSelectorLabelApplyConfiguration) *LocationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAvailableSelectorLabels")
		}
		b.AvailableSelectorLabels = append(b.AvailableSelectorLabels, *values[i])
	}
	return b
}

// WithInstanceSelector sets the InstanceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceSelector field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithInstanceSelector(value *v1.LabelSelectorApplyConfiguration) *LocationSpecApplyConfiguration {
	b.InstanceSelector = value
	return b
}
