/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"

	workloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
)

// AggregatedLocationStatusApplyConfiguration represents a declarative configuration of the AggregatedLocationStatus type for use
// with apply.
type AggregatedLocationStatusApplyConfiguration struct {
	LocationName    *string                         `json:"locationName,omitempty"`
	Phase           *workloadv1alpha1.WorkloadPhase `json:"phase,omitempty"`
	Healthy         *bool                           `json:"healthy,omitempty"`
	LastUpdateTime  *v1.Time                        `json:"lastUpdateTime,omitempty"`
	ExtractedFields *runtime.RawExtension           `json:"extractedFields,omitempty"`
}

// AggregatedLocationStatusApplyConfiguration constructs a declarative configuration of the AggregatedLocationStatus type for use with
// apply.
func AggregatedLocationStatus() *AggregatedLocationStatusApplyConfiguration {
	return &AggregatedLocationStatusApplyConfiguration{}
}

// WithLocationName sets the LocationName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocationName field is set to the value of the last call.
func (b *AggregatedLocationStatusApplyConfiguration) WithLocationName(value string) *AggregatedLocationStatusApplyConfiguration {
	b.LocationName = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *AggregatedLocationStatusApplyConfiguration) WithPhase(value workloadv1alpha1.WorkloadPhase) *AggregatedLocationStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithHealthy sets the Healthy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Healthy field is set to the value of the last call.
func (b *AggregatedLocationStatusApplyConfiguration) WithHealthy(value bool) *AggregatedLocationStatusApplyConfiguration {
	b.Healthy = &value
	return b
}

// WithLastUpdateTime sets the LastUpdateTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdateTime field is set to the value of the last call.
func (b *AggregatedLocationStatusApplyConfiguration) WithLastUpdateTime(value v1.Time) *AggregatedLocationStatusApplyConfiguration {
	b.LastUpdateTime = &value
	return b
}

// WithExtractedFields sets the ExtractedFields field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtractedFields field is set to the value of the last call.
func (b *AggregatedLocationStatusApplyConfiguration) WithExtractedFields(value runtime.RawExtension) *AggregatedLocationStatusApplyConfiguration {
	b.ExtractedFields = &value
	return b
}
