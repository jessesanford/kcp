/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ResourceUsageStatusApplyConfiguration represents a declarative configuration of the ResourceUsageStatus type for use
// with apply.
type ResourceUsageStatusApplyConfiguration struct {
	CPUUsage     *int64 `json:"cpuUsage,omitempty"`
	MemoryUsage  *int64 `json:"memoryUsage,omitempty"`
	StorageUsage *int64 `json:"storageUsage,omitempty"`
	PodCount     *int32 `json:"podCount,omitempty"`
}

// ResourceUsageStatusApplyConfiguration constructs a declarative configuration of the ResourceUsageStatus type for use with
// apply.
func ResourceUsageStatus() *ResourceUsageStatusApplyConfiguration {
	return &ResourceUsageStatusApplyConfiguration{}
}

// WithCPUUsage sets the CPUUsage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPUUsage field is set to the value of the last call.
func (b *ResourceUsageStatusApplyConfiguration) WithCPUUsage(value int64) *ResourceUsageStatusApplyConfiguration {
	b.CPUUsage = &value
	return b
}

// WithMemoryUsage sets the MemoryUsage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryUsage field is set to the value of the last call.
func (b *ResourceUsageStatusApplyConfiguration) WithMemoryUsage(value int64) *ResourceUsageStatusApplyConfiguration {
	b.MemoryUsage = &value
	return b
}

// WithStorageUsage sets the StorageUsage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageUsage field is set to the value of the last call.
func (b *ResourceUsageStatusApplyConfiguration) WithStorageUsage(value int64) *ResourceUsageStatusApplyConfiguration {
	b.StorageUsage = &value
	return b
}

// WithPodCount sets the PodCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodCount field is set to the value of the last call.
func (b *ResourceUsageStatusApplyConfiguration) WithPodCount(value int32) *ResourceUsageStatusApplyConfiguration {
	b.PodCount = &value
	return b
}
