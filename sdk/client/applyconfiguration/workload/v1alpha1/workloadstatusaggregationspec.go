/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// WorkloadStatusAggregationSpecApplyConfiguration represents a declarative configuration of the WorkloadStatusAggregationSpec type for use
// with apply.
type WorkloadStatusAggregationSpecApplyConfiguration struct {
	WorkloadRef       *WorkloadReferenceApplyConfiguration    `json:"workloadRef,omitempty"`
	StatusFields      []StatusFieldSelectorApplyConfiguration `json:"statusFields,omitempty"`
	AggregationPolicy *AggregationPolicyApplyConfiguration    `json:"aggregationPolicy,omitempty"`
	HealthPolicy      *HealthPolicyApplyConfiguration         `json:"healthPolicy,omitempty"`
	UpdateFrequency   *v1.Duration                            `json:"updateFrequency,omitempty"`
}

// WorkloadStatusAggregationSpecApplyConfiguration constructs a declarative configuration of the WorkloadStatusAggregationSpec type for use with
// apply.
func WorkloadStatusAggregationSpec() *WorkloadStatusAggregationSpecApplyConfiguration {
	return &WorkloadStatusAggregationSpecApplyConfiguration{}
}

// WithWorkloadRef sets the WorkloadRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadRef field is set to the value of the last call.
func (b *WorkloadStatusAggregationSpecApplyConfiguration) WithWorkloadRef(value *WorkloadReferenceApplyConfiguration) *WorkloadStatusAggregationSpecApplyConfiguration {
	b.WorkloadRef = value
	return b
}

// WithStatusFields adds the given value to the StatusFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StatusFields field.
func (b *WorkloadStatusAggregationSpecApplyConfiguration) WithStatusFields(values ...*StatusFieldSelectorApplyConfiguration) *WorkloadStatusAggregationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStatusFields")
		}
		b.StatusFields = append(b.StatusFields, *values[i])
	}
	return b
}

// WithAggregationPolicy sets the AggregationPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AggregationPolicy field is set to the value of the last call.
func (b *WorkloadStatusAggregationSpecApplyConfiguration) WithAggregationPolicy(value *AggregationPolicyApplyConfiguration) *WorkloadStatusAggregationSpecApplyConfiguration {
	b.AggregationPolicy = value
	return b
}

// WithHealthPolicy sets the HealthPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthPolicy field is set to the value of the last call.
func (b *WorkloadStatusAggregationSpecApplyConfiguration) WithHealthPolicy(value *HealthPolicyApplyConfiguration) *WorkloadStatusAggregationSpecApplyConfiguration {
	b.HealthPolicy = value
	return b
}

// WithUpdateFrequency sets the UpdateFrequency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateFrequency field is set to the value of the last call.
func (b *WorkloadStatusAggregationSpecApplyConfiguration) WithUpdateFrequency(value v1.Duration) *WorkloadStatusAggregationSpecApplyConfiguration {
	b.UpdateFrequency = &value
	return b
}
