/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// HealthPolicyApplyConfiguration represents a declarative configuration of the HealthPolicy type for use
// with apply.
type HealthPolicyApplyConfiguration struct {
	HealthyConditions   []ConditionRequirementApplyConfiguration `json:"healthyConditions,omitempty"`
	UnhealthyConditions []ConditionRequirementApplyConfiguration `json:"unhealthyConditions,omitempty"`
	MinHealthyReplicas  *intstr.IntOrString                      `json:"minHealthyReplicas,omitempty"`
}

// HealthPolicyApplyConfiguration constructs a declarative configuration of the HealthPolicy type for use with
// apply.
func HealthPolicy() *HealthPolicyApplyConfiguration {
	return &HealthPolicyApplyConfiguration{}
}

// WithHealthyConditions adds the given value to the HealthyConditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HealthyConditions field.
func (b *HealthPolicyApplyConfiguration) WithHealthyConditions(values ...*ConditionRequirementApplyConfiguration) *HealthPolicyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHealthyConditions")
		}
		b.HealthyConditions = append(b.HealthyConditions, *values[i])
	}
	return b
}

// WithUnhealthyConditions adds the given value to the UnhealthyConditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the UnhealthyConditions field.
func (b *HealthPolicyApplyConfiguration) WithUnhealthyConditions(values ...*ConditionRequirementApplyConfiguration) *HealthPolicyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUnhealthyConditions")
		}
		b.UnhealthyConditions = append(b.UnhealthyConditions, *values[i])
	}
	return b
}

// WithMinHealthyReplicas sets the MinHealthyReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinHealthyReplicas field is set to the value of the last call.
func (b *HealthPolicyApplyConfiguration) WithMinHealthyReplicas(value intstr.IntOrString) *HealthPolicyApplyConfiguration {
	b.MinHealthyReplicas = &value
	return b
}
