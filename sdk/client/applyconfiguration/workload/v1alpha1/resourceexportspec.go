/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
)

// ResourceExportSpecApplyConfiguration represents a declarative configuration of the ResourceExportSpec type for use
// with apply.
type ResourceExportSpecApplyConfiguration struct {
	Resource           *ResourceReferenceApplyConfiguration       `json:"resource,omitempty"`
	Target             *ExportTargetApplyConfiguration            `json:"target,omitempty"`
	ConflictResolution *workloadv1alpha1.ConflictResolutionPolicy `json:"conflictResolution,omitempty"`
}

// ResourceExportSpecApplyConfiguration constructs a declarative configuration of the ResourceExportSpec type for use with
// apply.
func ResourceExportSpec() *ResourceExportSpecApplyConfiguration {
	return &ResourceExportSpecApplyConfiguration{}
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *ResourceExportSpecApplyConfiguration) WithResource(value *ResourceReferenceApplyConfiguration) *ResourceExportSpecApplyConfiguration {
	b.Resource = value
	return b
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *ResourceExportSpecApplyConfiguration) WithTarget(value *ExportTargetApplyConfiguration) *ResourceExportSpecApplyConfiguration {
	b.Target = value
	return b
}

// WithConflictResolution sets the ConflictResolution field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConflictResolution field is set to the value of the last call.
func (b *ResourceExportSpecApplyConfiguration) WithConflictResolution(value workloadv1alpha1.ConflictResolutionPolicy) *ResourceExportSpecApplyConfiguration {
	b.ConflictResolution = &value
	return b
}
