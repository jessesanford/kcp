/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	workloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
)

// LocationSpecApplyConfiguration represents a declarative configuration of the LocationSpec type for use
// with apply.
type LocationSpecApplyConfiguration struct {
	DisplayName       *string                                    `json:"displayName,omitempty"`
	Description       *string                                    `json:"description,omitempty"`
	LocationType      *workloadv1alpha1.LocationType             `json:"locationType,omitempty"`
	Parent            *string                                    `json:"parent,omitempty"`
	Labels            map[string]string                          `json:"labels,omitempty"`
	InstanceTypes     []InstanceTypeApplyConfiguration           `json:"instanceTypes,omitempty"`
	AvailabilityZones []string                                   `json:"availabilityZones,omitempty"`
	Coordinates       *GeographicalCoordinatesApplyConfiguration `json:"coordinates,omitempty"`
}

// LocationSpecApplyConfiguration constructs a declarative configuration of the LocationSpec type for use with
// apply.
func LocationSpec() *LocationSpecApplyConfiguration {
	return &LocationSpecApplyConfiguration{}
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithDisplayName(value string) *LocationSpecApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithDescription(value string) *LocationSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithLocationType sets the LocationType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocationType field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithLocationType(value workloadv1alpha1.LocationType) *LocationSpecApplyConfiguration {
	b.LocationType = &value
	return b
}

// WithParent sets the Parent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parent field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithParent(value string) *LocationSpecApplyConfiguration {
	b.Parent = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *LocationSpecApplyConfiguration) WithLabels(entries map[string]string) *LocationSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithInstanceTypes adds the given value to the InstanceTypes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InstanceTypes field.
func (b *LocationSpecApplyConfiguration) WithInstanceTypes(values ...*InstanceTypeApplyConfiguration) *LocationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstanceTypes")
		}
		b.InstanceTypes = append(b.InstanceTypes, *values[i])
	}
	return b
}

// WithAvailabilityZones adds the given value to the AvailabilityZones field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailabilityZones field.
func (b *LocationSpecApplyConfiguration) WithAvailabilityZones(values ...string) *LocationSpecApplyConfiguration {
	for i := range values {
		b.AvailabilityZones = append(b.AvailabilityZones, values[i])
	}
	return b
}

// WithCoordinates sets the Coordinates field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Coordinates field is set to the value of the last call.
func (b *LocationSpecApplyConfiguration) WithCoordinates(value *GeographicalCoordinatesApplyConfiguration) *LocationSpecApplyConfiguration {
	b.Coordinates = value
	return b
}
