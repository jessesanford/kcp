/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	conditionsv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/third_party/conditions/apis/conditions/v1alpha1"
	workloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
)

// WorkloadStatusAggregationStatusApplyConfiguration represents a declarative configuration of the WorkloadStatusAggregationStatus type for use
// with apply.
type WorkloadStatusAggregationStatusApplyConfiguration struct {
	AggregatedPhase     *workloadv1alpha1.WorkloadPhase              `json:"aggregatedPhase,omitempty"`
	TotalLocations      *int32                                       `json:"totalLocations,omitempty"`
	HealthyLocations    *int32                                       `json:"healthyLocations,omitempty"`
	UnhealthyLocations  *int32                                       `json:"unhealthyLocations,omitempty"`
	LocationStatuses    []AggregatedLocationStatusApplyConfiguration `json:"locationStatuses,omitempty"`
	AggregatedFields    []AggregatedFieldApplyConfiguration          `json:"aggregatedFields,omitempty"`
	LastAggregationTime *v1.Time                                     `json:"lastAggregationTime,omitempty"`
	Conditions          *conditionsv1alpha1.Conditions               `json:"conditions,omitempty"`
}

// WorkloadStatusAggregationStatusApplyConfiguration constructs a declarative configuration of the WorkloadStatusAggregationStatus type for use with
// apply.
func WorkloadStatusAggregationStatus() *WorkloadStatusAggregationStatusApplyConfiguration {
	return &WorkloadStatusAggregationStatusApplyConfiguration{}
}

// WithAggregatedPhase sets the AggregatedPhase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AggregatedPhase field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithAggregatedPhase(value workloadv1alpha1.WorkloadPhase) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.AggregatedPhase = &value
	return b
}

// WithTotalLocations sets the TotalLocations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalLocations field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithTotalLocations(value int32) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.TotalLocations = &value
	return b
}

// WithHealthyLocations sets the HealthyLocations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthyLocations field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithHealthyLocations(value int32) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.HealthyLocations = &value
	return b
}

// WithUnhealthyLocations sets the UnhealthyLocations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnhealthyLocations field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithUnhealthyLocations(value int32) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.UnhealthyLocations = &value
	return b
}

// WithLocationStatuses adds the given value to the LocationStatuses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LocationStatuses field.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithLocationStatuses(values ...*AggregatedLocationStatusApplyConfiguration) *WorkloadStatusAggregationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLocationStatuses")
		}
		b.LocationStatuses = append(b.LocationStatuses, *values[i])
	}
	return b
}

// WithAggregatedFields adds the given value to the AggregatedFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AggregatedFields field.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithAggregatedFields(values ...*AggregatedFieldApplyConfiguration) *WorkloadStatusAggregationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAggregatedFields")
		}
		b.AggregatedFields = append(b.AggregatedFields, *values[i])
	}
	return b
}

// WithLastAggregationTime sets the LastAggregationTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastAggregationTime field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithLastAggregationTime(value v1.Time) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.LastAggregationTime = &value
	return b
}

// WithConditions sets the Conditions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Conditions field is set to the value of the last call.
func (b *WorkloadStatusAggregationStatusApplyConfiguration) WithConditions(value conditionsv1alpha1.Conditions) *WorkloadStatusAggregationStatusApplyConfiguration {
	b.Conditions = &value
	return b
}
