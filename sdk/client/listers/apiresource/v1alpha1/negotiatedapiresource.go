/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"

	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/apiresource/v1alpha1"
)

// NegotiatedAPIResourceClusterLister helps list NegotiatedAPIResources across all workspaces,
// or scope down to a NegotiatedAPIResourceLister for one workspace.
// All objects returned here must be treated as read-only.
type NegotiatedAPIResourceClusterLister interface {
	// List lists all NegotiatedAPIResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.NegotiatedAPIResource, err error)
	// Cluster returns a lister that can list and get NegotiatedAPIResources in one workspace.
	Cluster(clusterName logicalcluster.Name) NegotiatedAPIResourceLister
	NegotiatedAPIResourceClusterListerExpansion
}

// negotiatedAPIResourceClusterLister implements the NegotiatedAPIResourceClusterLister interface.
type negotiatedAPIResourceClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.NegotiatedAPIResource]
}

var _ NegotiatedAPIResourceClusterLister = new(negotiatedAPIResourceClusterLister)

// NewNegotiatedAPIResourceClusterLister returns a new NegotiatedAPIResourceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNegotiatedAPIResourceClusterLister(indexer cache.Indexer) NegotiatedAPIResourceClusterLister {
	return &negotiatedAPIResourceClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.NegotiatedAPIResource](indexer, kcpv1alpha1.Resource("negotiatedapiresource")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get NegotiatedAPIResources.
func (l *negotiatedAPIResourceClusterLister) Cluster(clusterName logicalcluster.Name) NegotiatedAPIResourceLister {
	return &negotiatedAPIResourceLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// negotiatedAPIResourceLister can list all NegotiatedAPIResources inside a workspace
// or scope down to a NegotiatedAPIResourceNamespaceLister for one namespace.
type negotiatedAPIResourceLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.NegotiatedAPIResource]
}

var _ NegotiatedAPIResourceLister = new(negotiatedAPIResourceLister)

// NegotiatedAPIResourceLister can list all NegotiatedAPIResources, or get one in particular.
// All objects returned here must be treated as read-only.
type NegotiatedAPIResourceLister interface {
	// List lists all NegotiatedAPIResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.NegotiatedAPIResource, err error)
	// Get retrieves the NegotiatedAPIResource from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.NegotiatedAPIResource, error)
	NegotiatedAPIResourceListerExpansion
}

// NewNegotiatedAPIResourceLister returns a new NegotiatedAPIResourceLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNegotiatedAPIResourceLister(indexer cache.Indexer) NegotiatedAPIResourceLister {
	return &negotiatedAPIResourceLister{
		kcplisters.New[*kcpv1alpha1.NegotiatedAPIResource](indexer, kcpv1alpha1.Resource("negotiatedapiresource")),
	}
}

// negotiatedAPIResourceScopedLister can list all NegotiatedAPIResources inside a workspace
// or scope down to a NegotiatedAPIResourceNamespaceLister.
type negotiatedAPIResourceScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.NegotiatedAPIResource]
}
