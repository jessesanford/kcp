/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/tmc/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterRegistrationClusterLister helps list ClusterRegistrations across all workspaces,
// or scope down to a ClusterRegistrationLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterRegistrationClusterLister interface {
	// List lists all ClusterRegistrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ClusterRegistration, err error)
	// Cluster returns a lister that can list and get ClusterRegistrations in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterRegistrationLister
	ClusterRegistrationClusterListerExpansion
}

// clusterRegistrationClusterLister implements the ClusterRegistrationClusterLister interface.
type clusterRegistrationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.ClusterRegistration]
}

var _ ClusterRegistrationClusterLister = new(clusterRegistrationClusterLister)

// NewClusterRegistrationClusterLister returns a new ClusterRegistrationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterRegistrationClusterLister(indexer cache.Indexer) ClusterRegistrationClusterLister {
	return &clusterRegistrationClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.ClusterRegistration](indexer, kcpv1alpha1.Resource("clusterregistration")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterRegistrations.
func (l *clusterRegistrationClusterLister) Cluster(clusterName logicalcluster.Name) ClusterRegistrationLister {
	return &clusterRegistrationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// clusterRegistrationLister can list all ClusterRegistrations inside a workspace
// or scope down to a ClusterRegistrationNamespaceLister for one namespace.
type clusterRegistrationLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ClusterRegistration]
}

var _ ClusterRegistrationLister = new(clusterRegistrationLister)

// ClusterRegistrationLister can list all ClusterRegistrations, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterRegistrationLister interface {
	// List lists all ClusterRegistrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ClusterRegistration, err error)
	// Get retrieves the ClusterRegistration from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.ClusterRegistration, error)
	ClusterRegistrationListerExpansion
}

// NewClusterRegistrationLister returns a new ClusterRegistrationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterRegistrationLister(indexer cache.Indexer) ClusterRegistrationLister {
	return &clusterRegistrationLister{
		kcplisters.New[*kcpv1alpha1.ClusterRegistration](indexer, kcpv1alpha1.Resource("clusterregistration")),
	}
}

// clusterRegistrationScopedLister can list all ClusterRegistrations inside a workspace
// or scope down to a ClusterRegistrationNamespaceLister.
type clusterRegistrationScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ClusterRegistration]
}
