/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SyncTargetHeartbeatClusterLister helps list SyncTargetHeartbeats across all workspaces,
// or scope down to a SyncTargetHeartbeatLister for one workspace.
// All objects returned here must be treated as read-only.
type SyncTargetHeartbeatClusterLister interface {
	// List lists all SyncTargetHeartbeats in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.SyncTargetHeartbeat, err error)
	// Cluster returns a lister that can list and get SyncTargetHeartbeats in one workspace.
	Cluster(clusterName logicalcluster.Name) SyncTargetHeartbeatLister
	SyncTargetHeartbeatClusterListerExpansion
}

// syncTargetHeartbeatClusterLister implements the SyncTargetHeartbeatClusterLister interface.
type syncTargetHeartbeatClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.SyncTargetHeartbeat]
}

var _ SyncTargetHeartbeatClusterLister = new(syncTargetHeartbeatClusterLister)

// NewSyncTargetHeartbeatClusterLister returns a new SyncTargetHeartbeatClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewSyncTargetHeartbeatClusterLister(indexer cache.Indexer) SyncTargetHeartbeatClusterLister {
	return &syncTargetHeartbeatClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.SyncTargetHeartbeat](indexer, kcpv1alpha1.Resource("synctargetheartbeat")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get SyncTargetHeartbeats.
func (l *syncTargetHeartbeatClusterLister) Cluster(clusterName logicalcluster.Name) SyncTargetHeartbeatLister {
	return &syncTargetHeartbeatLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// syncTargetHeartbeatLister can list all SyncTargetHeartbeats inside a workspace
// or scope down to a SyncTargetHeartbeatNamespaceLister for one namespace.
type syncTargetHeartbeatLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.SyncTargetHeartbeat]
}

var _ SyncTargetHeartbeatLister = new(syncTargetHeartbeatLister)

// SyncTargetHeartbeatLister can list all SyncTargetHeartbeats, or get one in particular.
// All objects returned here must be treated as read-only.
type SyncTargetHeartbeatLister interface {
	// List lists all SyncTargetHeartbeats in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.SyncTargetHeartbeat, err error)
	// Get retrieves the SyncTargetHeartbeat from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.SyncTargetHeartbeat, error)
	SyncTargetHeartbeatListerExpansion
}

// NewSyncTargetHeartbeatLister returns a new SyncTargetHeartbeatLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewSyncTargetHeartbeatLister(indexer cache.Indexer) SyncTargetHeartbeatLister {
	return &syncTargetHeartbeatLister{
		kcplisters.New[*kcpv1alpha1.SyncTargetHeartbeat](indexer, kcpv1alpha1.Resource("synctargetheartbeat")),
	}
}

// syncTargetHeartbeatScopedLister can list all SyncTargetHeartbeats inside a workspace
// or scope down to a SyncTargetHeartbeatNamespaceLister.
type syncTargetHeartbeatScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.SyncTargetHeartbeat]
}
