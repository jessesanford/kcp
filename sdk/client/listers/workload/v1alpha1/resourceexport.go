/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceExportClusterLister helps list ResourceExports across all workspaces,
// or scope down to a ResourceExportLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceExportClusterLister interface {
	// List lists all ResourceExports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ResourceExport, err error)
	// Cluster returns a lister that can list and get ResourceExports in one workspace.
	Cluster(clusterName logicalcluster.Name) ResourceExportLister
	ResourceExportClusterListerExpansion
}

// resourceExportClusterLister implements the ResourceExportClusterLister interface.
type resourceExportClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.ResourceExport]
}

var _ ResourceExportClusterLister = new(resourceExportClusterLister)

// NewResourceExportClusterLister returns a new ResourceExportClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceExportClusterLister(indexer cache.Indexer) ResourceExportClusterLister {
	return &resourceExportClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.ResourceExport](indexer, kcpv1alpha1.Resource("resourceexport")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceExports.
func (l *resourceExportClusterLister) Cluster(clusterName logicalcluster.Name) ResourceExportLister {
	return &resourceExportLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceExportLister can list all ResourceExports inside a workspace
// or scope down to a ResourceExportNamespaceLister for one namespace.
type resourceExportLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ResourceExport]
}

var _ ResourceExportLister = new(resourceExportLister)

// ResourceExportLister can list all ResourceExports, or get one in particular.
// All objects returned here must be treated as read-only.
type ResourceExportLister interface {
	// List lists all ResourceExports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ResourceExport, err error)
	// Get retrieves the ResourceExport from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.ResourceExport, error)
	ResourceExportListerExpansion
}

// NewResourceExportLister returns a new ResourceExportLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceExportLister(indexer cache.Indexer) ResourceExportLister {
	return &resourceExportLister{
		kcplisters.New[*kcpv1alpha1.ResourceExport](indexer, kcpv1alpha1.Resource("resourceexport")),
	}
}

// resourceExportScopedLister can list all ResourceExports inside a workspace
// or scope down to a ResourceExportNamespaceLister.
type resourceExportScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ResourceExport]
}
