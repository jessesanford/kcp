/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SyncTargetClusterLister helps list SyncTargets across all workspaces,
// or scope down to a SyncTargetLister for one workspace.
// All objects returned here must be treated as read-only.
type SyncTargetClusterLister interface {
	// List lists all SyncTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.SyncTarget, err error)
	// Cluster returns a lister that can list and get SyncTargets in one workspace.
	Cluster(clusterName logicalcluster.Name) SyncTargetLister
	SyncTargetClusterListerExpansion
}

// syncTargetClusterLister implements the SyncTargetClusterLister interface.
type syncTargetClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.SyncTarget]
}

var _ SyncTargetClusterLister = new(syncTargetClusterLister)

// NewSyncTargetClusterLister returns a new SyncTargetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewSyncTargetClusterLister(indexer cache.Indexer) SyncTargetClusterLister {
	return &syncTargetClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.SyncTarget](indexer, kcpv1alpha1.Resource("synctarget")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get SyncTargets.
func (l *syncTargetClusterLister) Cluster(clusterName logicalcluster.Name) SyncTargetLister {
	return &syncTargetLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// syncTargetLister can list all SyncTargets inside a workspace
// or scope down to a SyncTargetNamespaceLister for one namespace.
type syncTargetLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.SyncTarget]
}

var _ SyncTargetLister = new(syncTargetLister)

// SyncTargetLister can list all SyncTargets, or get one in particular.
// All objects returned here must be treated as read-only.
type SyncTargetLister interface {
	// List lists all SyncTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.SyncTarget, err error)
	// Get retrieves the SyncTarget from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.SyncTarget, error)
	SyncTargetListerExpansion
}

// NewSyncTargetLister returns a new SyncTargetLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewSyncTargetLister(indexer cache.Indexer) SyncTargetLister {
	return &syncTargetLister{
		kcplisters.New[*kcpv1alpha1.SyncTarget](indexer, kcpv1alpha1.Resource("synctarget")),
	}
}

// syncTargetScopedLister can list all SyncTargets inside a workspace
// or scope down to a SyncTargetNamespaceLister.
type syncTargetScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.SyncTarget]
}
