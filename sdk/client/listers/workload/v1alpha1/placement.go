/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlacementClusterLister helps list Placements across all workspaces,
// or scope down to a PlacementLister for one workspace.
// All objects returned here must be treated as read-only.
type PlacementClusterLister interface {
	// List lists all Placements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.Placement, err error)
	// Cluster returns a lister that can list and get Placements in one workspace.
	Cluster(clusterName logicalcluster.Name) PlacementLister
	PlacementClusterListerExpansion
}

// placementClusterLister implements the PlacementClusterLister interface.
type placementClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.Placement]
}

var _ PlacementClusterLister = new(placementClusterLister)

// NewPlacementClusterLister returns a new PlacementClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPlacementClusterLister(indexer cache.Indexer) PlacementClusterLister {
	return &placementClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.Placement](indexer, kcpv1alpha1.Resource("placement")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Placements.
func (l *placementClusterLister) Cluster(clusterName logicalcluster.Name) PlacementLister {
	return &placementLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// placementLister can list all Placements inside a workspace
// or scope down to a PlacementNamespaceLister for one namespace.
type placementLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.Placement]
}

var _ PlacementLister = new(placementLister)

// PlacementLister can list all Placements, or get one in particular.
// All objects returned here must be treated as read-only.
type PlacementLister interface {
	// List lists all Placements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.Placement, err error)
	// Get retrieves the Placement from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.Placement, error)
	PlacementListerExpansion
}

// NewPlacementLister returns a new PlacementLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPlacementLister(indexer cache.Indexer) PlacementLister {
	return &placementLister{
		kcplisters.New[*kcpv1alpha1.Placement](indexer, kcpv1alpha1.Resource("placement")),
	}
}

// placementScopedLister can list all Placements inside a workspace
// or scope down to a PlacementNamespaceLister.
type placementScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.Placement]
}
