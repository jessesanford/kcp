/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceImportClusterLister helps list ResourceImports across all workspaces,
// or scope down to a ResourceImportLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceImportClusterLister interface {
	// List lists all ResourceImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ResourceImport, err error)
	// Cluster returns a lister that can list and get ResourceImports in one workspace.
	Cluster(clusterName logicalcluster.Name) ResourceImportLister
	ResourceImportClusterListerExpansion
}

// resourceImportClusterLister implements the ResourceImportClusterLister interface.
type resourceImportClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.ResourceImport]
}

var _ ResourceImportClusterLister = new(resourceImportClusterLister)

// NewResourceImportClusterLister returns a new ResourceImportClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceImportClusterLister(indexer cache.Indexer) ResourceImportClusterLister {
	return &resourceImportClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.ResourceImport](indexer, kcpv1alpha1.Resource("resourceimport")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceImports.
func (l *resourceImportClusterLister) Cluster(clusterName logicalcluster.Name) ResourceImportLister {
	return &resourceImportLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceImportLister can list all ResourceImports inside a workspace
// or scope down to a ResourceImportNamespaceLister for one namespace.
type resourceImportLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ResourceImport]
}

var _ ResourceImportLister = new(resourceImportLister)

// ResourceImportLister can list all ResourceImports, or get one in particular.
// All objects returned here must be treated as read-only.
type ResourceImportLister interface {
	// List lists all ResourceImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.ResourceImport, err error)
	// Get retrieves the ResourceImport from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.ResourceImport, error)
	ResourceImportListerExpansion
}

// NewResourceImportLister returns a new ResourceImportLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceImportLister(indexer cache.Indexer) ResourceImportLister {
	return &resourceImportLister{
		kcplisters.New[*kcpv1alpha1.ResourceImport](indexer, kcpv1alpha1.Resource("resourceimport")),
	}
}

// resourceImportScopedLister can list all ResourceImports inside a workspace
// or scope down to a ResourceImportNamespaceLister.
type resourceImportScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.ResourceImport]
}
