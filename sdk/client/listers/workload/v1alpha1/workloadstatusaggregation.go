/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"

	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
)

// WorkloadStatusAggregationClusterLister helps list WorkloadStatusAggregations across all workspaces,
// or scope down to a WorkloadStatusAggregationLister for one workspace.
// All objects returned here must be treated as read-only.
type WorkloadStatusAggregationClusterLister interface {
	// List lists all WorkloadStatusAggregations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.WorkloadStatusAggregation, err error)
	// Cluster returns a lister that can list and get WorkloadStatusAggregations in one workspace.
	Cluster(clusterName logicalcluster.Name) WorkloadStatusAggregationLister
	WorkloadStatusAggregationClusterListerExpansion
}

// workloadStatusAggregationClusterLister implements the WorkloadStatusAggregationClusterLister interface.
type workloadStatusAggregationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.WorkloadStatusAggregation]
}

var _ WorkloadStatusAggregationClusterLister = new(workloadStatusAggregationClusterLister)

// NewWorkloadStatusAggregationClusterLister returns a new WorkloadStatusAggregationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewWorkloadStatusAggregationClusterLister(indexer cache.Indexer) WorkloadStatusAggregationClusterLister {
	return &workloadStatusAggregationClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.WorkloadStatusAggregation](indexer, kcpv1alpha1.Resource("workloadstatusaggregation")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get WorkloadStatusAggregations.
func (l *workloadStatusAggregationClusterLister) Cluster(clusterName logicalcluster.Name) WorkloadStatusAggregationLister {
	return &workloadStatusAggregationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// workloadStatusAggregationLister can list all WorkloadStatusAggregations inside a workspace
// or scope down to a WorkloadStatusAggregationNamespaceLister for one namespace.
type workloadStatusAggregationLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.WorkloadStatusAggregation]
}

var _ WorkloadStatusAggregationLister = new(workloadStatusAggregationLister)

// WorkloadStatusAggregationLister can list all WorkloadStatusAggregations, or get one in particular.
// All objects returned here must be treated as read-only.
type WorkloadStatusAggregationLister interface {
	// List lists all WorkloadStatusAggregations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.WorkloadStatusAggregation, err error)
	// Get retrieves the WorkloadStatusAggregation from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.WorkloadStatusAggregation, error)
	WorkloadStatusAggregationListerExpansion
}

// NewWorkloadStatusAggregationLister returns a new WorkloadStatusAggregationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewWorkloadStatusAggregationLister(indexer cache.Indexer) WorkloadStatusAggregationLister {
	return &workloadStatusAggregationLister{
		kcplisters.New[*kcpv1alpha1.WorkloadStatusAggregation](indexer, kcpv1alpha1.Resource("workloadstatusaggregation")),
	}
}

// workloadStatusAggregationScopedLister can list all WorkloadStatusAggregations inside a workspace
// or scope down to a WorkloadStatusAggregationNamespaceLister.
type workloadStatusAggregationScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.WorkloadStatusAggregation]
}
