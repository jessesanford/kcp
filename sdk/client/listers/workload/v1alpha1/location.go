/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocationClusterLister helps list Locations across all workspaces,
// or scope down to a LocationLister for one workspace.
// All objects returned here must be treated as read-only.
type LocationClusterLister interface {
	// List lists all Locations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.Location, err error)
	// Cluster returns a lister that can list and get Locations in one workspace.
	Cluster(clusterName logicalcluster.Name) LocationLister
	LocationClusterListerExpansion
}

// locationClusterLister implements the LocationClusterLister interface.
type locationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*kcpv1alpha1.Location]
}

var _ LocationClusterLister = new(locationClusterLister)

// NewLocationClusterLister returns a new LocationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewLocationClusterLister(indexer cache.Indexer) LocationClusterLister {
	return &locationClusterLister{
		kcplisters.NewCluster[*kcpv1alpha1.Location](indexer, kcpv1alpha1.Resource("location")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Locations.
func (l *locationClusterLister) Cluster(clusterName logicalcluster.Name) LocationLister {
	return &locationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// locationLister can list all Locations inside a workspace
// or scope down to a LocationNamespaceLister for one namespace.
type locationLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.Location]
}

var _ LocationLister = new(locationLister)

// LocationLister can list all Locations, or get one in particular.
// All objects returned here must be treated as read-only.
type LocationLister interface {
	// List lists all Locations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kcpv1alpha1.Location, err error)
	// Get retrieves the Location from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kcpv1alpha1.Location, error)
	LocationListerExpansion
}

// NewLocationLister returns a new LocationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewLocationLister(indexer cache.Indexer) LocationLister {
	return &locationLister{
		kcplisters.New[*kcpv1alpha1.Location](indexer, kcpv1alpha1.Resource("location")),
	}
}

// locationScopedLister can list all Locations inside a workspace
// or scope down to a LocationNamespaceLister.
type locationScopedLister struct {
	kcplisters.ResourceIndexer[*kcpv1alpha1.Location]
}
