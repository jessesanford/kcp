/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	kcpapiresourcev1alpha1 "github.com/kcp-dev/kcp/sdk/apis/apiresource/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/apiresource/v1alpha1"
)

// NegotiatedAPIResourceClusterInformer provides access to a shared informer and lister for
// NegotiatedAPIResources.
type NegotiatedAPIResourceClusterInformer interface {
	Cluster(logicalcluster.Name) NegotiatedAPIResourceInformer
	ClusterWithContext(context.Context, logicalcluster.Name) NegotiatedAPIResourceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.NegotiatedAPIResourceClusterLister
}

type negotiatedAPIResourceClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewNegotiatedAPIResourceClusterInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNegotiatedAPIResourceClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNegotiatedAPIResourceClusterInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNegotiatedAPIResourceClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().Watch(context.Background(), options)
			},
		},
		&kcpapiresourcev1alpha1.NegotiatedAPIResource{},
		resyncPeriod,
		indexers,
	)
}

func (i *negotiatedAPIResourceClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *negotiatedAPIResourceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpapiresourcev1alpha1.NegotiatedAPIResource{}, i.defaultInformer)
}

func (i *negotiatedAPIResourceClusterInformer) Lister() kcpv1alpha1.NegotiatedAPIResourceClusterLister {
	return kcpv1alpha1.NewNegotiatedAPIResourceClusterLister(i.Informer().GetIndexer())
}

func (i *negotiatedAPIResourceClusterInformer) Cluster(clusterName logicalcluster.Name) NegotiatedAPIResourceInformer {
	return &negotiatedAPIResourceInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *negotiatedAPIResourceClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) NegotiatedAPIResourceInformer {
	return &negotiatedAPIResourceInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type negotiatedAPIResourceInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.NegotiatedAPIResourceLister
}

func (i *negotiatedAPIResourceInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *negotiatedAPIResourceInformer) Lister() kcpv1alpha1.NegotiatedAPIResourceLister {
	return i.lister
}

// NegotiatedAPIResourceInformer provides access to a shared informer and lister for
// NegotiatedAPIResources.
type NegotiatedAPIResourceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.NegotiatedAPIResourceLister
}

type negotiatedAPIResourceScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewNegotiatedAPIResourceInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNegotiatedAPIResourceInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNegotiatedAPIResourceInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNegotiatedAPIResourceInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().Watch(context.Background(), options)
			},
		},
		&kcpapiresourcev1alpha1.NegotiatedAPIResource{},
		resyncPeriod,
		indexers,
	)
}

func (i *negotiatedAPIResourceScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpapiresourcev1alpha1.NegotiatedAPIResource{}, i.defaultInformer)
}

func (i *negotiatedAPIResourceScopedInformer) Lister() kcpv1alpha1.NegotiatedAPIResourceLister {
	return kcpv1alpha1.NewNegotiatedAPIResourceLister(i.Informer().GetIndexer())
}

func (i *negotiatedAPIResourceScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
