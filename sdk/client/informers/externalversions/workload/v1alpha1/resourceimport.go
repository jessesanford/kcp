/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ResourceImportClusterInformer provides access to a shared informer and lister for
// ResourceImports.
type ResourceImportClusterInformer interface {
	Cluster(logicalcluster.Name) ResourceImportInformer
	ClusterWithContext(context.Context, logicalcluster.Name) ResourceImportInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.ResourceImportClusterLister
}

type resourceImportClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewResourceImportClusterInformer constructs a new informer for ResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewResourceImportClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredResourceImportClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredResourceImportClusterInformer constructs a new informer for ResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredResourceImportClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceImports().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceImports().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.ResourceImport{},
		resyncPeriod,
		indexers,
	)
}

func (i *resourceImportClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredResourceImportClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *resourceImportClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.ResourceImport{}, i.defaultInformer)
}

func (i *resourceImportClusterInformer) Lister() kcpv1alpha1.ResourceImportClusterLister {
	return kcpv1alpha1.NewResourceImportClusterLister(i.Informer().GetIndexer())
}

func (i *resourceImportClusterInformer) Cluster(clusterName logicalcluster.Name) ResourceImportInformer {
	return &resourceImportInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *resourceImportClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) ResourceImportInformer {
	return &resourceImportInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type resourceImportInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.ResourceImportLister
}

func (i *resourceImportInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *resourceImportInformer) Lister() kcpv1alpha1.ResourceImportLister {
	return i.lister
}

// ResourceImportInformer provides access to a shared informer and lister for
// ResourceImports.
type ResourceImportInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.ResourceImportLister
}

type resourceImportScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewResourceImportInformer constructs a new informer for ResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewResourceImportInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredResourceImportInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredResourceImportInformer constructs a new informer for ResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredResourceImportInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceImports().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceImports().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.ResourceImport{},
		resyncPeriod,
		indexers,
	)
}

func (i *resourceImportScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.ResourceImport{}, i.defaultInformer)
}

func (i *resourceImportScopedInformer) Lister() kcpv1alpha1.ResourceImportLister {
	return kcpv1alpha1.NewResourceImportLister(i.Informer().GetIndexer())
}

func (i *resourceImportScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredResourceImportInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
