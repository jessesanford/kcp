/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// PlacementClusterInformer provides access to a shared informer and lister for
// Placements.
type PlacementClusterInformer interface {
	Cluster(logicalcluster.Name) PlacementInformer
	ClusterWithContext(context.Context, logicalcluster.Name) PlacementInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.PlacementClusterLister
}

type placementClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewPlacementClusterInformer constructs a new informer for Placement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPlacementClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPlacementClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPlacementClusterInformer constructs a new informer for Placement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPlacementClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().Placements().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().Placements().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.Placement{},
		resyncPeriod,
		indexers,
	)
}

func (i *placementClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPlacementClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *placementClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.Placement{}, i.defaultInformer)
}

func (i *placementClusterInformer) Lister() kcpv1alpha1.PlacementClusterLister {
	return kcpv1alpha1.NewPlacementClusterLister(i.Informer().GetIndexer())
}

func (i *placementClusterInformer) Cluster(clusterName logicalcluster.Name) PlacementInformer {
	return &placementInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *placementClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) PlacementInformer {
	return &placementInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type placementInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.PlacementLister
}

func (i *placementInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *placementInformer) Lister() kcpv1alpha1.PlacementLister {
	return i.lister
}

// PlacementInformer provides access to a shared informer and lister for
// Placements.
type PlacementInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.PlacementLister
}

type placementScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewPlacementInformer constructs a new informer for Placement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPlacementInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPlacementInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPlacementInformer constructs a new informer for Placement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPlacementInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().Placements().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().Placements().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.Placement{},
		resyncPeriod,
		indexers,
	)
}

func (i *placementScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.Placement{}, i.defaultInformer)
}

func (i *placementScopedInformer) Lister() kcpv1alpha1.PlacementLister {
	return kcpv1alpha1.NewPlacementLister(i.Informer().GetIndexer())
}

func (i *placementScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPlacementInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
