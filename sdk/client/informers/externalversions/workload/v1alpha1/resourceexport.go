/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ResourceExportClusterInformer provides access to a shared informer and lister for
// ResourceExports.
type ResourceExportClusterInformer interface {
	Cluster(logicalcluster.Name) ResourceExportInformer
	ClusterWithContext(context.Context, logicalcluster.Name) ResourceExportInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.ResourceExportClusterLister
}

type resourceExportClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewResourceExportClusterInformer constructs a new informer for ResourceExport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewResourceExportClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredResourceExportClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredResourceExportClusterInformer constructs a new informer for ResourceExport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredResourceExportClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceExports().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceExports().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.ResourceExport{},
		resyncPeriod,
		indexers,
	)
}

func (i *resourceExportClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredResourceExportClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *resourceExportClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.ResourceExport{}, i.defaultInformer)
}

func (i *resourceExportClusterInformer) Lister() kcpv1alpha1.ResourceExportClusterLister {
	return kcpv1alpha1.NewResourceExportClusterLister(i.Informer().GetIndexer())
}

func (i *resourceExportClusterInformer) Cluster(clusterName logicalcluster.Name) ResourceExportInformer {
	return &resourceExportInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *resourceExportClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) ResourceExportInformer {
	return &resourceExportInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type resourceExportInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.ResourceExportLister
}

func (i *resourceExportInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *resourceExportInformer) Lister() kcpv1alpha1.ResourceExportLister {
	return i.lister
}

// ResourceExportInformer provides access to a shared informer and lister for
// ResourceExports.
type ResourceExportInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.ResourceExportLister
}

type resourceExportScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewResourceExportInformer constructs a new informer for ResourceExport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewResourceExportInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredResourceExportInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredResourceExportInformer constructs a new informer for ResourceExport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredResourceExportInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceExports().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().ResourceExports().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.ResourceExport{},
		resyncPeriod,
		indexers,
	)
}

func (i *resourceExportScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.ResourceExport{}, i.defaultInformer)
}

func (i *resourceExportScopedInformer) Lister() kcpv1alpha1.ResourceExportLister {
	return kcpv1alpha1.NewResourceExportLister(i.Informer().GetIndexer())
}

func (i *resourceExportScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredResourceExportInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
