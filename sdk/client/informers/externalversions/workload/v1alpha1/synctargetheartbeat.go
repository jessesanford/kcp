/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SyncTargetHeartbeatClusterInformer provides access to a shared informer and lister for
// SyncTargetHeartbeats.
type SyncTargetHeartbeatClusterInformer interface {
	Cluster(logicalcluster.Name) SyncTargetHeartbeatInformer
	ClusterWithContext(context.Context, logicalcluster.Name) SyncTargetHeartbeatInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.SyncTargetHeartbeatClusterLister
}

type syncTargetHeartbeatClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewSyncTargetHeartbeatClusterInformer constructs a new informer for SyncTargetHeartbeat type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetHeartbeatClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetHeartbeatClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetHeartbeatClusterInformer constructs a new informer for SyncTargetHeartbeat type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetHeartbeatClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargetHeartbeats().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargetHeartbeats().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.SyncTargetHeartbeat{},
		resyncPeriod,
		indexers,
	)
}

func (i *syncTargetHeartbeatClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetHeartbeatClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *syncTargetHeartbeatClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.SyncTargetHeartbeat{}, i.defaultInformer)
}

func (i *syncTargetHeartbeatClusterInformer) Lister() kcpv1alpha1.SyncTargetHeartbeatClusterLister {
	return kcpv1alpha1.NewSyncTargetHeartbeatClusterLister(i.Informer().GetIndexer())
}

func (i *syncTargetHeartbeatClusterInformer) Cluster(clusterName logicalcluster.Name) SyncTargetHeartbeatInformer {
	return &syncTargetHeartbeatInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *syncTargetHeartbeatClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) SyncTargetHeartbeatInformer {
	return &syncTargetHeartbeatInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type syncTargetHeartbeatInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.SyncTargetHeartbeatLister
}

func (i *syncTargetHeartbeatInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *syncTargetHeartbeatInformer) Lister() kcpv1alpha1.SyncTargetHeartbeatLister {
	return i.lister
}

// SyncTargetHeartbeatInformer provides access to a shared informer and lister for
// SyncTargetHeartbeats.
type SyncTargetHeartbeatInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.SyncTargetHeartbeatLister
}

type syncTargetHeartbeatScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewSyncTargetHeartbeatInformer constructs a new informer for SyncTargetHeartbeat type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetHeartbeatInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSyncTargetHeartbeatInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetHeartbeatInformer constructs a new informer for SyncTargetHeartbeat type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetHeartbeatInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargetHeartbeats().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargetHeartbeats().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.SyncTargetHeartbeat{},
		resyncPeriod,
		indexers,
	)
}

func (i *syncTargetHeartbeatScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.SyncTargetHeartbeat{}, i.defaultInformer)
}

func (i *syncTargetHeartbeatScopedInformer) Lister() kcpv1alpha1.SyncTargetHeartbeatLister {
	return kcpv1alpha1.NewSyncTargetHeartbeatLister(i.Informer().GetIndexer())
}

func (i *syncTargetHeartbeatScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSyncTargetHeartbeatInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
