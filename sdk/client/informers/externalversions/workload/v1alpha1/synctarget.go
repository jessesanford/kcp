/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SyncTargetClusterInformer provides access to a shared informer and lister for
// SyncTargets.
type SyncTargetClusterInformer interface {
	Cluster(logicalcluster.Name) SyncTargetInformer
	ClusterWithContext(context.Context, logicalcluster.Name) SyncTargetInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.SyncTargetClusterLister
}

type syncTargetClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewSyncTargetClusterInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetClusterInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.SyncTarget{},
		resyncPeriod,
		indexers,
	)
}

func (i *syncTargetClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *syncTargetClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.SyncTarget{}, i.defaultInformer)
}

func (i *syncTargetClusterInformer) Lister() kcpv1alpha1.SyncTargetClusterLister {
	return kcpv1alpha1.NewSyncTargetClusterLister(i.Informer().GetIndexer())
}

func (i *syncTargetClusterInformer) Cluster(clusterName logicalcluster.Name) SyncTargetInformer {
	return &syncTargetInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *syncTargetClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) SyncTargetInformer {
	return &syncTargetInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type syncTargetInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.SyncTargetLister
}

func (i *syncTargetInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *syncTargetInformer) Lister() kcpv1alpha1.SyncTargetLister {
	return i.lister
}

// SyncTargetInformer provides access to a shared informer and lister for
// SyncTargets.
type SyncTargetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.SyncTargetLister
}

type syncTargetScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewSyncTargetInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSyncTargetInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.SyncTarget{},
		resyncPeriod,
		indexers,
	)
}

func (i *syncTargetScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.SyncTarget{}, i.defaultInformer)
}

func (i *syncTargetScopedInformer) Lister() kcpv1alpha1.SyncTargetLister {
	return kcpv1alpha1.NewSyncTargetLister(i.Informer().GetIndexer())
}

func (i *syncTargetScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSyncTargetInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
