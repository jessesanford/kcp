/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	kcpworkloadv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/workload/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/workload/v1alpha1"
)

// WorkloadStatusAggregationClusterInformer provides access to a shared informer and lister for
// WorkloadStatusAggregations.
type WorkloadStatusAggregationClusterInformer interface {
	Cluster(logicalcluster.Name) WorkloadStatusAggregationInformer
	ClusterWithContext(context.Context, logicalcluster.Name) WorkloadStatusAggregationInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.WorkloadStatusAggregationClusterLister
}

type workloadStatusAggregationClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewWorkloadStatusAggregationClusterInformer constructs a new informer for WorkloadStatusAggregation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkloadStatusAggregationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkloadStatusAggregationClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkloadStatusAggregationClusterInformer constructs a new informer for WorkloadStatusAggregation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkloadStatusAggregationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().WorkloadStatusAggregations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().WorkloadStatusAggregations().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.WorkloadStatusAggregation{},
		resyncPeriod,
		indexers,
	)
}

func (i *workloadStatusAggregationClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkloadStatusAggregationClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *workloadStatusAggregationClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.WorkloadStatusAggregation{}, i.defaultInformer)
}

func (i *workloadStatusAggregationClusterInformer) Lister() kcpv1alpha1.WorkloadStatusAggregationClusterLister {
	return kcpv1alpha1.NewWorkloadStatusAggregationClusterLister(i.Informer().GetIndexer())
}

func (i *workloadStatusAggregationClusterInformer) Cluster(clusterName logicalcluster.Name) WorkloadStatusAggregationInformer {
	return &workloadStatusAggregationInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *workloadStatusAggregationClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) WorkloadStatusAggregationInformer {
	return &workloadStatusAggregationInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type workloadStatusAggregationInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.WorkloadStatusAggregationLister
}

func (i *workloadStatusAggregationInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *workloadStatusAggregationInformer) Lister() kcpv1alpha1.WorkloadStatusAggregationLister {
	return i.lister
}

// WorkloadStatusAggregationInformer provides access to a shared informer and lister for
// WorkloadStatusAggregations.
type WorkloadStatusAggregationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.WorkloadStatusAggregationLister
}

type workloadStatusAggregationScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewWorkloadStatusAggregationInformer constructs a new informer for WorkloadStatusAggregation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkloadStatusAggregationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredWorkloadStatusAggregationInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkloadStatusAggregationInformer constructs a new informer for WorkloadStatusAggregation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkloadStatusAggregationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().WorkloadStatusAggregations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().WorkloadStatusAggregations().Watch(context.Background(), options)
			},
		},
		&kcpworkloadv1alpha1.WorkloadStatusAggregation{},
		resyncPeriod,
		indexers,
	)
}

func (i *workloadStatusAggregationScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcpworkloadv1alpha1.WorkloadStatusAggregation{}, i.defaultInformer)
}

func (i *workloadStatusAggregationScopedInformer) Lister() kcpv1alpha1.WorkloadStatusAggregationLister {
	return kcpv1alpha1.NewWorkloadStatusAggregationLister(i.Informer().GetIndexer())
}

func (i *workloadStatusAggregationScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredWorkloadStatusAggregationInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
