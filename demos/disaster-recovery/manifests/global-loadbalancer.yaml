apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-loadbalancer
  namespace: default
  labels:
    app: global-loadbalancer
    component: traffic-manager
    demo: disaster-recovery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: global-loadbalancer
  template:
    metadata:
      labels:
        app: global-loadbalancer
        component: traffic-manager
        demo: disaster-recovery
    spec:
      serviceAccountName: global-loadbalancer
      containers:
      - name: loadbalancer
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Global Load Balancer starting..."
          echo "Managing traffic distribution between regions"
          echo "Regions: us-east-1 (east), us-west-2 (west)"
          
          # Simulate load balancer logic
          while true; do
            echo "$(date): Checking regional health status..."
            
            # Check East region health
            echo "$(date): East region - Checking webapp-east-svc health"
            
            # Check West region health  
            echo "$(date): West region - Checking webapp-west-svc health"
            
            # Simulate traffic distribution decisions
            echo "$(date): Current traffic distribution:"
            echo "  - East region: 50% (HEALTHY)"
            echo "  - West region: 50% (HEALTHY)"
            
            echo "$(date): Load balancer cycle complete, next check in 30s"
            sleep 30
          done
        env:
        - name: LB_MODE
          value: "active-active"
        - name: HEALTH_CHECK_INTERVAL
          value: "30s"
        - name: FAILOVER_THRESHOLD
          value: "3"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -v grep | grep -q 'sh -c'"
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -v grep | grep -q 'sh -c'"
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: global-loadbalancer
  namespace: default
  labels:
    app: global-loadbalancer
    demo: disaster-recovery
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: global-loadbalancer
  labels:
    app: global-loadbalancer
    demo: disaster-recovery
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: global-loadbalancer
  labels:
    app: global-loadbalancer
    demo: disaster-recovery
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: global-loadbalancer
subjects:
- kind: ServiceAccount
  name: global-loadbalancer
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: global-loadbalancer-svc
  namespace: default
  labels:
    app: global-loadbalancer
    demo: disaster-recovery
spec:
  selector:
    app: global-loadbalancer
  ports:
  - name: http
    port: 80
    targetPort: 8080
  type: ClusterIP